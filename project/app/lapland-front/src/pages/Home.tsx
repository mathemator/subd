import { useState } from 'react';
import { useConfig } from '../ConfigContext'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫

function Home() {
      const [message, setMessage] = useState('');
      const [loginMessage, setLoginMessage] = useState('');
      const [id, setId] = useState("");
      const { serverUrl } = useConfig(); // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

      const handleOrder = async () => {
        try {
          const response = await fetch(`${serverUrl}/lapland/make-random-order`, {
            method: 'POST',
          });
          if (response.ok) {
            const data = await response.json();
            setMessage('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞, id: ' + data.id);
          } else {
            setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏');
          }
        } catch (error) {
          setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
      };

  const handleSubmitId = async () => {
      if (!id.trim()) {
        setLoginMessage("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID");
        return;
      }

      try {
        const response = await fetch(`${serverUrl}/lapland/login/${id}`, {
          method: "POST",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
            const result = await response.text();
            console.log("–æ—Ç–≤–µ—Ç: " + result);
          localStorage.setItem("userId", id);
          setLoginMessage(result);
        } else {
            const result = await response.text();
          setLoginMessage(result);
        }
      } catch (error) {
        setLoginMessage("–û—à–∏–±–∫–∞.");
      }
    };

  return (
    <div>
      <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–ø-–õ–∞–Ω–¥–∏—é!</h1>
      <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.</p>

      <h1>–ò–ª–∏ üê∂</h1>
      <button onClick={handleOrder}>–õ–æ—Ç–µ—Ä–µ–π–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!</button>
      <p>{message}</p>

      <h2>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID:</h2>
      <input
        type="text"
        value={id}
        onChange={(e) => setId(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ ID"
      />
      <button onClick={handleSubmitId}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID</button>
      <p>{loginMessage}</p>
    </div>
  );
}

export default Home;
